# -*- coding: utf-8 -*-
"""KMeans_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12h_n3qCAbA9UaqFeszKWCPaEOMmYv_4b
"""

from google.colab import files
uploaded = files.upload()

"""# Main Libraries"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px

"""# Loading data"""

df_raw = pd.read_csv('LSTM_output.csv')
df_raw = df_raw.tail(int(0.25*len(df_raw))) # last 25% of initial data
df_raw

df = df_raw.drop(['airSpeed','altitudeAMSL','flightDistance','flightTime','distanceToHome','headingToNextWP','headingToHome','gps.lat','gps.lon'],axis=1)
df

"""# Understanding patterns"""

df.anomaly27.value_counts()

fig1 = px.scatter(df, x="rollRate", y="pitchRate", color="yawRate",size="anomaly27")
fig1.show()

fig2 = px.scatter_3d(df, x="rollRate", y="pitchRate",z="yawRate",color="climbRate",size="anomaly27")
fig2.show()

"""# Finding our clusters"""

df_anomaly = df.loc[df['anomaly27'] == 1].drop(['anomaly27'],axis=1)
df_anomaly

from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
import plotly.graph_objects as go
X=df_anomaly
scaler = MinMaxScaler()
scaler.fit(X)
X=scaler.transform(X)
inertia = []
for i in range(1,11):
    kmeans = KMeans(
        n_clusters=i, init="k-means++",
        n_init=10,
        tol=1e-04, random_state=42
    )
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)
    print(f'inertia: {inertia}')
fig = go.Figure(data=go.Scatter(x=np.arange(1,11),y=inertia))
fig.update_layout(title="Inertia vs Cluster Number",xaxis=dict(range=[0,11],title="Cluster Number"),
                  yaxis={'title':'Inertia'},
                 annotations=[
        dict(
            x=3,
            y=inertia[2],
            xref="x",
            yref="y",
            text="Elbow!",
            showarrow=True,
            arrowhead=7,
            ax=20,
            ay=-40
        )
    ])

kmeans = KMeans(
        n_clusters=3, init="k-means++",
        n_init=10,
        tol=1e-04, random_state=42
    )
kmeans.fit(X)
clusters=pd.DataFrame(X,columns=df_anomaly.columns)
clusters['label']=kmeans.labels_
polar=clusters.groupby("label").mean().reset_index()
polar=pd.melt(polar,id_vars=["label"])
fig4 = px.line_polar(polar, r="value", theta="variable", color="label", line_close=True,height=800,width=1400)
fig4.show()

pie=clusters.groupby('label').size().reset_index()
pie.columns=['label','value']
px.pie(pie,values='value',names='label',color=['blue','red','green'])

clusters

"""**Exporting the Model**"""

# saving the model (joblib)
import joblib
filename = 'clusters.joblib'
joblib.dump(kmeans, filename)

# loading the model (joblib)
filename = 'clusters.joblib'
loaded_model = joblib.load(filename)
loaded_model

# Example of data to take as input to the model
df_anomaly.iloc[5]

df_anomaly.iloc[[5]].values #input values

model_input = df_anomaly.iloc[[5]].values
model_output = loaded_model.predict(model_input)
model_output